/*==============================================================================================================================================
A.I VS. Player
Dhruv Sharma and Hitansh Bhatt
October 9, 2020 Last Modified: October 28, 2020
Java Eclipse SE-1.8
==============================================================================================================================================*/
																																				
import java.io.*;
import java.util.*;
import java.io.File;

public class AIvsPlayer {
	
	//Declare all global variables used in the program 
	static Scanner myScanner; 
	static ArrayList <String[]> codes; //ArrayList of string integers to store all the possible combinations
	static ArrayList <String[]> pegs = new ArrayList <String[]>(); // ArrayList of string integers to store user input(used for formatting)
	static String[] colors; //helps form all the combinations
	static String[] lastGuess; //the computer guess as the A.I 
	static ArrayList <Integer> visitedLastGuess; //checks black / white peg indexes (transposition tables)
	static int numberOfGuesses=1; //counts total number of guesses
	static String [] arguments; 
	static ArrayList <String []> storeLastGuess; //stores all the last guesses, so it can print the interface
	
	
	//====================================================================================================================================================================================================
	//main method that sets up the A.I and sends in default first guess, gives basic instructions at the beginning to create user friendly experience
	//Initializes global variables and throws IOException, so the input can be asked 
	//@return type void
	public static void main(String[] args)throws IOException {
		System.out.println("Welcome to A.I vs Player!\n\nForm a 4 letter code from the colors R, B, G, Y, O, P (Duplicates are allowed)\nThis is easy mode, the computer will have 10 guesses!\n ");
		setupAI();
		
		//Used this file handling loop to list out all the combinations so I can use it while error checking my algorithm, it helps finding individual indexes and finding problem with the algorithm instead of printing it all out in the console. 
		File testFile = new File("PossibleCombinations.txt"); //stores all the possibilities from RRRR to PPPP 
		if (testFile.exists() == false) {
			testFile.createNewFile();
			System.out.println("Created New File");
		}
		PrintWriter output = new PrintWriter(testFile);
		for (int i = 0; i < codes.size(); i++) {
			for (int a = 0; a < 4; a ++) {
				output.print(codes.get(i)[a]);
			}
		output.println(""); //Output Spacing 
		}
		output.close(); //Closes the file
		
		arguments = args;
		myScanner = new Scanner (System.in); 
	
		compGuess(lastGuess); //Sends in the lastGuess generated by the algorithm to output it
	}//end main method
	
	//====================================================================================================================================================================================================
	//This procedural method gets sent the user input and counts the number of black pins and white pins in the string array, then sends it to the main algorithm.
	//@throws IOException
	//Local Variables: int userBlackPins, int userWhitePins 
	//@param String [] pins from the user input that sends in the string array of amount of Black or White pins in the last guess. 
	//@return type void
	public static void pins(String pins[], int numberOfPegs) throws IOException {
		int userBlackPins = 0, userWhitePins = 0; //Initializes the number of blackpins and whitepins to 0
		
		for (int i = 0; i < pins.length; i++) { //for loop to check for the letter B or letter W
			if (pins[i].contains("B") || pins[i].contains("b")) {
				userBlackPins++;
				System.out.println();
			}
			else if (pins[i].contains("W") || pins[i].contains("w")) { 
				userWhitePins++;
			}
		}
		//System.out.println("B: " + userBlackPins + " W: " + userWhitePins); test cases to check for black and white pegs after each iteration
		gameInterface(numberOfPegs); //Sends the number of pegs to the game interface output, which prints out a cool interface for the game
		guessCodemaster(userBlackPins, userWhitePins); //Sends the pins to the A.I to compare and remove codes
	}//end method
	
	//====================================================================================================================================================================================================
	//This procedural method takes in the input of the number of white pins and black pins from the A.I's guess and sends it to the pins method to check for how many of each are there
	//@throws IOException
	//Local Variables boolean help, numberOfPegs, typePins, emptyArray
	//@param none
	//@return type void
	public static void inputCodeMaker() throws IOException{
		boolean help = true;
		String typePins[];
		String emptyArray[] = {""};
		int numberOfPegs=0;
		do { //Do while loop to check the number of pins that are in the user code, helps with the adding of arraylists after
            System.out.println("Enter the number of pins in this code (Eg: If there were 2 Black and 1 White, enter 3): ");
            if(myScanner.hasNextInt()){ 
                numberOfPegs = myScanner.nextInt();
                if (numberOfPegs <= 4 && numberOfPegs >=0) { //since there are only 4 pegs, it can only be between 0-4
                	help = false;//sets boolean to false after one input, for the while loop condition
                }
                else {
                	System.out.println(); 
                	System.out.println("Please enter a valid integer between 0 - 4. "); //User prompt to input a valid integer, if they don't enter a a number between 0-4
                }
            }
            else{ 
            	myScanner.nextLine(); //asks for input again, if the number is not in between 0-4
            	System.out.println();
                System.out.println("Please enter a valid integer between 0 - 4. "); 
            }
       }while(help); // Loop condition to continue the loop and stop after one input
		if (numberOfPegs == 0) { //if there are no pegs, it means there are no black or white pins, so directly sends it to the A.I algorithm
			pegs.add(emptyArray); //uses the empty array initialized at the start to add it into the ArrayList, uses it to ouput nothing on the game interface
			gameInterface(numberOfPegs); //sends the number of pegs to the interface, which uses it to print out null
			guessCodemaster(0, 0); //sends the parameters 0, 0 for number of black and white pins
		}
		typePins = new String[numberOfPegs]; //Initializes type pins to the size of 
		for (int i = 0; i < numberOfPegs; i++) { //uses a for loop that loops the same number of times as number of pegs, 
			System.out.println("Enter 'B' for the number of black pins and 'W' for the number of white pins for the computers guess (one value per line): ");
			do {// do while loop to check for run time errors
				typePins[i] = myScanner.nextLine(); 
			}
			while(!typePins[i].equalsIgnoreCase("w") && !typePins[i].equalsIgnoreCase("b"));  //while conditions to ask for input again if the input is not B or W
		}
		pegs.add(typePins); // adds the input to the ArrayList
		//System.out.println(pegs.size()); //test cases to check the size of the ArrayList, number of iterations
		
		//for (int i = 0; i < pegs.size(); i ++) {
		//	System.out.print(pegs.get(i) + " ");
		//} prints the input, test case

		if (pegs.get(pegs.size() - 1).length == 4 && pegs.get(pegs.size() - 1)[0].equalsIgnoreCase("B") && pegs.get(pegs.size() - 1)[1].equalsIgnoreCase("B") && pegs.get(pegs.size() - 1)[2].equalsIgnoreCase("B") && pegs.get(pegs.size() - 1)[3].equalsIgnoreCase("B") ){
			endGame(); //If the size of the length is 4 and all of them are B, it means the game is over, so it calls the endGame method
		}
		else {
			pins(pegs.get(pegs.size() - 1), numberOfPegs); //or sends it to the pins method to check for the number of individual Black or White pins
		}
	}//end method
	
	//====================================================================================================================================================================================================
	//This procedural method sets up all the possible combinations in the mastermind game and stores it in an ArrayList called codes, that is used to access the combinations 
	//Local Variables: ArrayList <String[]> stores the array as the lastGuess that is used to print the game interface, String array of Arrays to store individual colors to create combinations, visitedLastGuess array to check if the index has been visited for white pegs 
	//@param none
	//@return type void
	public static void setupAI(){
		storeLastGuess = new ArrayList <String[]>();
		
		String [] newArray2 = {"R", "R", "B", "B"}; //Using Donald Knuth's inital RRBB guess
		lastGuess = newArray2;
		
		String [] newArray = {"R","B","G","Y","O","P"};
		colors = newArray;
		codes = new ArrayList<>();
		for(String first:colors){ //4 for each loop to create all possible combinations
			for(String second:colors){
				for(String third:colors){
					for(String fourth:colors){
						String [] code = {first,second,third,fourth};
						codes.add(code); //adds them all to an ArrayList
						
	        }
	      }
	    }
	  }	
		storeLastGuess.add(lastGuess); //adds the guess the computer made to RRBB
		visitedLastGuess = new ArrayList <Integer>();
	}//end method

	//====================================================================================================================================================================================================
	//This procedural method is the main algorithm of the program, it compares the number of black pins and white pens and removes it from the ArrayList if the temporary white and black pins of all the possible combinations dont match
	//@throws IOException
	//Local Variable: boolean temp - to help check for white pins if condition, tempBlackPins and tempWhitePins - to check for black and white pins in all possible combinations
	//@param int userBlackPins and int userWhitePins from the pins method that checks user input and sends it into this method
	//@return type void
	public static void guessCodemaster(int userBlackPins, int userWhitePins) throws IOException{
		int tempBlackPins = 0, tempWhitePins = 0;
		boolean temp;
		
		/*for (int i = codes.size() - 1 ; i >= 0; i--) { //test case to print out all the possible combinations
			String [] tmp = codes.get(i);
			for(int a = 0; a < 4; a++) {
				System.out.print(tmp[a] );
			}
			System.out.println("");
		}*/
		
		if (codes.size() == 1) { //when checking the algorithm if the codes ArrayList size is reduced to one, call the end game method
			lastGuess = codes.get(0); //stores the only String Array left in codes to lastGuess 
			endGame(); //calls the method
		}
		else {
			codes.remove(lastGuess); //removes the lastGuess 
			for (int i = codes.size() - 1; i >= 0; i--) { //loops the whole combination ArrayList
				//System.out.println("d");
				visitedLastGuess.clear();//clears the ArrayList that checks for indexes that have been checked
				for (int a = 0; a < 4; a++) { //to check for each index of lastGuess and each combination
					if (codes.get(i)[a] == lastGuess[a]) { //if both the indexes are the same adds 1 to the tempBlackPins
						tempBlackPins++;
						visitedLastGuess.add(a); //adds that index to the visitedLastGuess array
					}
				}
				for (int a = 0; a < 4; a++)	{ //second for loop to check for white pins using the in built contains method for ArrayList
					for (int k = 0; k < 4; k ++) {//checks one index of to all 4 of the lastGuess
						temp = true; 
						for (int j = 0; j < visitedLastGuess.size(); j ++) { // if the index is the same as the k loop makes temp false so the if statement doesn't go through
							if (visitedLastGuess.get(j) == k ) {
								temp = false; 
							}
						}
						if (codes.get(i)[a].contains(lastGuess[k]) && temp == true) { //checks for white pins only only if the index hasn't been checked for tempBlackPins
							tempWhitePins++;
							//System.out.println(tempWhitePins);    
						}
					}
				}	
				//System.out.println("Comp B:" + tempBlackPins + " Player B:" + userBlackPins);
				//System.out.println("Comp W:" + tempWhitePins + " Player W:" + userWhitePins);
				if (tempBlackPins != userBlackPins && tempWhitePins != userWhitePins) {
					codes.remove(i); //main algorithm that removes the code if tempBlackPins and tempWhitePins is not equal to usre input
				}
				/*if (tempBlackPins != userBlackPins && tempWhitePins == userWhitePins) {
					codes.remove(i);
				}
				if (tempBlackPins == userBlackPins && tempWhitePins != userWhitePins) {
					codes.remove(i);
				}*/
				
				//System.out.println(codes.size());
				tempBlackPins = 0; //resets tempBlackPins and tempWhitePins
				tempWhitePins = 0;
			}
		lastGuess = codes.get(0);	//gets the first index and stores it into lastGuess
		storeLastGuess.add(lastGuess); //stores it in the lastGuess array so it can be used in the interface
		compGuess(lastGuess); //calls the compGuess method and sends lastGuess in 
		}
	}
	
	//====================================================================================================================================================================================================
	//This program prints out each of the individual guess made by the computer and tells them what guess number the computer is in
	//@throws IOException
	//@param String [] lastGuess, this is the string array that the computer guesses
	//@return void
	public static void compGuess(String [] lastGuess) throws IOException{
		if (numberOfGuesses ==  10) { //uses global variable for number of guesses to end game if the A.I takes more than 10 guesses to guess the code (normal guesses in a mastermind game)
			System.out.println("");
			System.out.println("Congratulations, you won! The computer couldn't guess your code in 10 turns :[ ");
			endGame(); //Calls the endGame method which asks the user if they want to play again or play a different game mode
		}
		else if (numberOfGuesses == 0) { //Default guess, for "R R B B"
			System.out.println("");
			System.out.println("The computer guesses the code: " + lastGuess[0] + lastGuess[1] + lastGuess[2] + lastGuess[3] + " This is guess " + numberOfGuesses);
		}
		else if (numberOfGuesses > 0) { //if its between 1-10 use this condition
			System.out.println("");
			System.out.println("The computer guesses the code: " + lastGuess[0] + lastGuess[1] + lastGuess[2] + lastGuess[3] + " This is guess " + numberOfGuesses);
		}
		
		numberOfGuesses++; //Since the program goes through this loop everytime it guesses a code, it adds one to the total number of guesses before asking for another input
		inputCodeMaker(); //calls the user to check for black and white pegs again
	}//end method
	
	//====================================================================================================================================================================================================
	//This procedural methods prints out the game interface each time pins are checked for
	//@param int numberOfPegs - from the userInput method that asks total number of pegs, helps print individual black and white pins
	//@return type void
	public static void gameInterface(int numberOfPegs){
		System.out.println(" Color    Pegs     Guess: " + (numberOfGuesses - 1)); 
		System.out.println("---------------");
		
		for (int x = 0; x < storeLastGuess.size(); x++) {
			System.out.print(" ");
			for (int a = 0; a < 4; a++) { // basic double loop to get each value of each String Array
				System.out.print(storeLastGuess.get(x)[a]);	
			}
			System.out.print("     "); //Spacing between the color and pegs
			
			if (pegs.size() > 0) { //if the size is greater than 0 prints out the whole list 
				for (int i = 0; i < pegs.get(x).length; i++) {
					System.out.print(pegs.get(x)[i]);
				}
			}
			if (numberOfPegs == 0) { //If the numberOfPegs is 0 prints out empty spaces 
				for (int i = 0; i < storeLastGuess.size(); i++) {
					System.out.print("    ");
				}
			}
			System.out.println(""); //formatting
		}	
	}//end method
	
	//====================================================================================================================================================================================================
	//This procedural method ends the game and returns back to the menu class that asks to repeat the game 
	//@throws IOException
	//Local Variables: String choice - to check if the user wants to quit or play again
	//@return type void
	public static void endGame() throws IOException{
		BufferedReader br = new BufferedReader (new InputStreamReader(System.in));
		String choice;
		if (numberOfGuesses < 10) { //If the guesses is less than 10 A.I wins
			System.out.println("");
			System.out.println("Oh no! The A.I won the game in " + (numberOfGuesses - 1) + " guesses. ");
			System.out.println("");
		}
		numberOfGuesses = 1; //resets number of guesses so the user can play again
		do { //do while loop to check user input 
			System.out.println("If you wish to return to the main menu type 'exit' or if you would like to continue, just press 'enter'");
			choice = br.readLine();
			if (choice.equalsIgnoreCase("exit")) {
				Menu.main(null);//calls Menu method if input is exit
			}
			else
				AIvsPlayer.main(arguments); //calls the main method if user enters anything else
		}while (choice.equalsIgnoreCase("exit")); //ends the program if answer is exit 
	}//end method
}//End Program	
