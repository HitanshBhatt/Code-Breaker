/*============================================================================================================================================================================================
Mastermind Game
Hitansh Bhatt
2nd November 2020
Java, Oxygen.3a (4.7.3a)
==============================================================================================================================================================================================
Problem Definition – Required to create a part of the game that performs the following function:
(i) Allow the user to guess the code set by AI 
And additionally:
(1) Provide three levels of difficulties
(2) Read and write to/from files

Input – Guesses based on the difficulty (If easy: 10 guesses, medium: 8 guesses, hard:6 guesses)
Output – (i) The guesses made by the user 
(ii) User friendly prompts 
(iii) The code set by the computer 

(1) Use try/catch to check user input
Process – Use and apply the logic of the Mastermind game along with the use of java skills learnt in class in order to create an efficient and logical program
==============================================================================================================================================================================================
 */

import java.io.*;
import java.util.*;
public class PlayerVsAI {

	/**main method
	 * This procedural method is called automatically and is used to organize the calling of other methods defined in the class
	 *
	 * List of local variables:
	 * (1) turn - increments at the end of the main method to count the number of guesses made by the user <type int>
	 * (2) numOfGuesses - increments at the end of the main method to count the number of guesses made by the user <type int>
	 * (3) userGuess - an array of size 4 to store user input for each guess <type int[]>
	 * (4) generateRandom - an array of size 4 to store the random code generated by the program <type int[]>
	 * (5) level - a variable to store the level of gameplay chosen by the user <type String>
	 * (6) choice - a variable that allows the user to exit to the main menu by typing 'exit' <type String>
	 * (7) guess - an array to call and store user input <type int[]>
	 * (8) myFile - a variable to store the name of the number of guesses into a file (writing to file) <type File>
	 * (9) output - a variable used to instantiate a PrintWriter object <type PrintWriter>
	 * @param args <type string>
	 * @throws IO Exception
	 * @return void
	 */
	public static void Main(String[] args,String name) throws IOException 
	{
		BufferedReader br = new BufferedReader (new InputStreamReader (System.in));
		int turn = 1;
		int numOfGuesses=1;
		int[] userGuess = new int[4];
		int[] generateRandom = new int[4];
		String level;
		String choice;
		do
		{
			int randomCode [] = generateRandomCode(generateRandom);
			System.out.println("Choose your level: ");
			System.out.println();
			System.out.println("1. Easy"+"\t"+"\t"+"2. Medium"+"\t"+"3. Hard");
			level = br.readLine();
			if (level.equalsIgnoreCase("Easy") || level.equals("1"))
			{
				System.out.println("Number of guesses available: 10");
				do 
				{
					for (int i =0; i<10;i++)
					{
						int guess[] = userInput(userGuess, randomCode, turn);
						mainAlgorithm(guess, randomCode, turn);
						numOfGuesses++;
						if(randomCode[0] == userGuess[0] && randomCode[1] == userGuess[1] && randomCode[2] == userGuess[2] && randomCode[3] == userGuess[3])
						{
							break;
						}
						else
							continue;
					}
				} while (!(randomCode[0] == userGuess[0] && randomCode[1] == userGuess[1] && randomCode[2] == userGuess[2] && randomCode[3] == userGuess[3]) && numOfGuesses <9);

				outputFinal(userGuess, randomCode, numOfGuesses);
			}

			else if ((level.equalsIgnoreCase("Medium")) || level.equals("2"))
			{
				System.out.println("Number of guesses available: 8");
				do
				{
					for (int i =0; i<8;i++)
					{
						int guess[] = userInput(userGuess, randomCode, turn);
						mainAlgorithm(guess, randomCode, turn);
						numOfGuesses++;
						if(randomCode[0] == userGuess[0] && randomCode[1] == userGuess[1] && randomCode[2] == userGuess[2] && randomCode[3] == userGuess[3])
						{
							break;
						}
						else
							continue;
					}
				} while (!(randomCode[0] == userGuess[0] && randomCode[1] == userGuess[1] && randomCode[2] == userGuess[2] && randomCode[3] == userGuess[3]) && numOfGuesses <7);

				outputFinal(userGuess, randomCode, numOfGuesses);
			}

			else if ((level.equalsIgnoreCase("Hard")) || level.equals("3"))
			{
				System.out.println("Number of guesses available: 6");
				do
				{
					for (int i =0; i<6;i++)
					{
						int guess[] = userInput(userGuess, randomCode, turn);
						mainAlgorithm(guess, randomCode, turn);
						numOfGuesses++;
						if(randomCode[0] == userGuess[0] && randomCode[1] == userGuess[1] && randomCode[2] == userGuess[2] && randomCode[3] == userGuess[3])
						{
							break;
						}
						else
							continue;	
					}
				} while (!(randomCode[0] == userGuess[0] && randomCode[1] == userGuess[1] && randomCode[2] == userGuess[2] && randomCode[3] == userGuess[3]) && numOfGuesses <5);

				outputFinal(userGuess, randomCode, numOfGuesses);
				System.out.println();
			}
			
			File myFile = new java.io.File("E:\\Hitansh\\Software\\eclipse-workspace\\Mastermind\\src\\ScoreReader.txt");
			PrintWriter output = new PrintWriter(new FileWriter(myFile,true));
			output.println("Number of guesses (made by "+name+"):");
			output.println((numOfGuesses-1));
			output.close();

			System.out.println("If you wish to return to the main menu type 'exit' or if you would like to continue, just press 'enter'");
			choice = br.readLine();
			if (choice.equalsIgnoreCase("exit"))
				Menu.main(null);
			else
			{
				numOfGuesses=1;
				continue;
			}
			System.out.println();

		}while (!choice.equalsIgnoreCase("exit"));
	}
	//end main method


	/**
	 * generateRandomCode method: This functional method generates a random code, stores it in an array, and returns the array
	 *
	 * List of Local Variables:
	 * none
	 *
	 * @param generateRandom <type int[]>
	 * @return array that stores the random code <type int[]>
	 */ 
	public static int[] generateRandomCode(int[] generateRandom)
	{
		for (int i = 0; i < generateRandom.length; i++)
			generateRandom[i] = new Random ().nextInt (6) + 1; //generate random code 

		System.out.println ("Random code is: " + generateRandom[0] + generateRandom[1] + generateRandom[2] + generateRandom[3]); //print random code for reference
		return generateRandom;
	}

	/**
	 * userInput method: This functional method reads user input, stores it in an array and returns the array
	 *
	 * List of Local Variables:
	 * none
	 *
	 * @param userGuess <type int[]> , randomCode <type int[], turn <type int>
	 * @throws IO Exception, Exception e
	 * @return array that stores the user guess <type int[]>
	 */ 
	public static int[] userInput(int [] userGuess, int [] randomCode, int turn) throws IOException
	{
		BufferedReader br = new BufferedReader (new InputStreamReader (System.in));

		try
		{
			for (int i = 0; i < 4; i++) 
			{
				do 
				{
					System.out.println ("Guess number " + (i + 1) + ": ");
					userGuess[i] = Integer.parseInt (br.readLine ());			//accept user guess
				} while (!(userGuess[i] >= 1 && userGuess[i] <= 6));
			}
			System.out.println ("Your guess was: " + userGuess[0] + userGuess[1] + userGuess[2] + userGuess[3] + "\n"); //print out user guess for their reference
		}
		catch (Exception e)
		{
			System.out.println("**Invalid Entry");
			System.out.println("Please enter a valid number!!");
			System.out.println();
		}
		
		return userGuess;
	}

	/**
	 * mainAlgorithm method: This functional method checks for the number of black and white pegs
	 *
	 * List of Local Variables:
	 * white - a boolean variable used to check for white pegs <type boolean>
	 * black - a boolean variable used to check for black pegs <type boolean>
	 * whitePegs - increments if white pegs are found <type int>
	 * blackPegs - increments if black pegs are found <type int>
	 *
	 * @param guess <type int[]> , randomCode <type int[], turn <type int>
	 * @return the turn number <type int>
	 */ 
	public static int mainAlgorithm(int[] guess, int[] randomCode, int turn)
	{
		boolean[] white = new boolean[4];
		boolean[] black = new boolean[4];
		Arrays.fill (white, false);
		Arrays.fill (black, false);
		for (int i = 0; i < white.length; i++) {
			black[i] = guess[i] == randomCode[i];
			if (!black[i]) {
				int j = 0;
				for (int k = 0; k < 3; k++, j++) {
					if (j == i)
						j++;
					white[i] = white[i] || (guess[i] == randomCode[j]);
				}
			}
		}
		int whitePegs = 0, blackPegs = 0;
		for (int i = 0; i < white.length; i++) {
			if (white[i])
				whitePegs++;						//check for white pegs and increment counter if any are found
			if (black[i])
				blackPegs++;						//check for black pegs and increment counter if any are found
		}
		System.out.println ("You have " + whitePegs + " white peg" + (whitePegs == 1 ? "" : "s") + " and " + blackPegs + " black peg"+ (blackPegs == 1 ? "" : "s")); //output # of black and/or white pegs
		turn ++;
		return turn;
	}

	/**
	 * outputFinal method: This procedural method outputs a user friendly prompt, the random code (if the user does not guess the code) and the number of turns it took them to guess the code
	 *
	 * List of Local Variables:
	 * none
	 *
	 * @param guess <type int[]> , randomCode <type int[], numOfGuesses <type int>
	 * @return void
	 */
	public static void outputFinal(int[] guess, int[] randomCode, int numOfGuesses)
	{
		if (randomCode[0] == guess[0] && randomCode[1] == guess[1] && randomCode[2] == guess[2] && randomCode[3] == guess[3]) 
			System.out.println ("\nCongratulations, you are the champion! It took you "+(numOfGuesses-1)+" guesses to crack the code");
		else
			System.out.println("Sorry you lost! The correct code was: "+randomCode[0] + randomCode[1] + randomCode[2] + randomCode[3]);
	}
}
// end PlayerVsAI class

